{"version":3,"sources":["../../../../server/api/routes/RegisterRouter.js"],"names":["router","express","Router","registerValidation","payload","errors","emailRegex","passRegex","userRegex","isValid","email","test","username","password","first_name","last_name","success","message","post","req","res","validation","body","json","send"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACtC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAMC,UAAU,GAAG,kCAAnB;AACA,MAAMC,SAAS,GAAG,YAAlB;AACA,MAAMC,SAAS,GAAG,+CAAlB;AACA,MAAIC,OAAO,GAAG,IAAd;;AAEA,MAAI,CAACL,OAAO,CAACM,KAAT,IAAkB,CAACJ,UAAU,CAACK,IAAX,CAAgBP,OAAO,CAACM,KAAxB,CAAvB,EAAuD;AACrDL,IAAAA,MAAM,CAACK,KAAP,GAAe,uCAAf;AACAD,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,MAAI,CAACL,OAAO,CAACQ,QAAT,IAAqB,CAACJ,SAAS,CAACG,IAAV,CAAeP,OAAO,CAACQ,QAAvB,CAA1B,EAA4D;AAC1DP,IAAAA,MAAM,CAACO,QAAP,GAAkB,+EAAlB;AACAH,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,MAAI,CAACL,OAAO,CAACS,QAAT,IAAqB,CAACN,SAAS,CAACI,IAAV,CAAeP,OAAO,CAACS,QAAvB,CAA1B,EAA4D;AAC1DR,IAAAA,MAAM,CAACQ,QAAP,GAAkB,wDAAlB;AACAJ,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,MAAI,CAACL,OAAO,CAACU,UAAb,EAAyB;AACvBT,IAAAA,MAAM,CAACS,UAAP,GAAoB,iCAApB;AACAL,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,MAAI,CAACL,OAAO,CAACW,SAAb,EAAwB;AACtBV,IAAAA,MAAM,CAACU,SAAP,GAAmB,gCAAnB;AACAN,IAAAA,OAAO,GAAG,KAAV;AACD;;AAED,SAAO;AACLO,IAAAA,OAAO,EAAEP,OADJ;AAELQ,IAAAA,OAAO,EAAER,OAAO,GAAG,EAAH,GAAQ,8CAFnB;AAGLJ,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD,CAjCD;;AAmCAL,MAAM,CAACkB,IAAP,CAAY,WAAZ,EAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMC,UAAU,GAAGlB,kBAAkB,CAACgB,GAAG,CAACG,IAAL,CAArC;;AAEA,MAAI,CAACD,UAAU,CAACL,OAAhB,EAAwB;AACtBI,IAAAA,GAAG,CAACG,IAAJ,CAASF,UAAT;AACD;;AACDD,EAAAA,GAAG,CAACI,IAAJ,CAAS,mBAAT;AACD,CAPD;eASexB,M","sourcesContent":["import express from 'express'\n\nconst router = express.Router()\n\nconst registerValidation = (payload) => {\n  let errors = {}\n  const emailRegex = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/\n  const passRegex = /^\\S{8,20}$/\n  const userRegex = /^(?=.{5,20}$)(?!.*[_.\\-]{2})[a-zA-Z0-9._\\-]+$/\n  let isValid = true\n\n  if (!payload.email || !emailRegex.test(payload.email)) {\n    errors.email = 'Please, provide a valid email address'\n    isValid = false\n  }\n  if (!payload.username || !userRegex.test(payload.username)) {\n    errors.username = 'Please, provide a valid username. 5 - 20 characters, [._-] digits and letters'\n    isValid = false\n  }\n  if (!payload.password || !passRegex.test(payload.password)) {\n    errors.password = 'Please, provide a password between 8 and 20 characters'\n    isValid = false\n  }\n  if (!payload.first_name) {\n    errors.first_name = 'Please, provide your first name'\n    isValid = false\n  }\n  if (!payload.last_name) {\n    errors.last_name = 'Please, provide your last name'\n    isValid = false\n  }\n\n  return {\n    success: isValid,\n    message: isValid ? '' : 'The form contains some errors. Please fix it',\n    errors: errors\n  }\n}\n\nrouter.post('/register', (req, res) => {\n  const validation = registerValidation(req.body)\n\n  if (!validation.success){\n    res.json(validation)\n  }\n  res.send('Validation passes')\n})\n\nexport default router"],"file":"RegisterRouter.js"}